import mongoose from "mongoose";

const vulnerabilitySchema = new mongoose.Schema({
  siteUrl: { type: String, required: true, index: true },
  scanId: { type: String, required: true, index: true }, // Group vulnerabilities by scan
  type: { 
    type: String, 
    required: true,
    enum: [
      "SSL/TLS",
      "Outdated Software",
      "Weak Password",
      "Security Headers",
      "Misconfiguration",
      "Plugin Vulnerability",
      "Other"
    ]
  },
  description: { type: String, required: true },
  severity: { 
    type: String, 
    required: true,
    enum: ["Critical", "High", "Medium", "Low"],
    index: true
  },
  status: {
    type: String,
    enum: ["Open", "In Progress", "Resolved", "Ignored"],
    default: "Open",
    index: true
  },
  recommendation: String, // How to fix it
  cveId: String, // CVE identifier if applicable
  affectedComponent: String, // Which plugin/software is affected
  detectedVersion: String, // Current version
  fixedVersion: String, // Version that fixes the issue
  exploitAvailable: { type: Boolean, default: false },
  resolvedAt: Date,
  resolvedBy: { type: mongoose.Schema.Types.ObjectId, ref: "User" },
  detectedAt: { type: Date, default: Date.now, index: true }
});

// Index for searching
vulnerabilitySchema.index({ siteUrl: 1, detectedAt: -1 });
vulnerabilitySchema.index({ severity: 1, status: 1 });
vulnerabilitySchema.index({ scanId: 1 });

export default mongoose.model("Vulnerability", vulnerabilitySchema);