import express from "express";
import { v4 as uuidv4 } from "uuid";
import Vulnerability from "../models/Vulnerability.js";
import ScanHistory from "../models/ScanHistory.js";
import Log from "../models/Log.js";
import { checkSuspiciousActivity } from "../utils/alertUtils.js";
import { transporter } from "../config/mailer.js";
import { protect } from "../middleware/authMiddleware.js";
import { runVulnerabilityScan } from "../utils/scanner.js";
import { generateVulnerabilityReport } from "../utils/reportGenerator.js";
import fs from "fs";

const router = express.Router();

// Helper function to create logs with automatic alert checking
const createLog = async (level, message, keyword = [], metadata = {}, userId = null, ipAddress = "System", userAgent = "Vulnerability Scanner") => {
  try {
    console.log("📝 Creating log:", { level, message: message.substring(0, 50) });
    
    const log = await Log.create({
      level,
      message,
      keyword,
      ipAddress,
      userAgent,
      userId,
      metadata
    });

    console.log("✅ Log created with ID:", log._id);

    // Check for suspicious activity and create alerts
    console.log("🔍 Checking for suspicious activity...");
    if (level === "suspicious" || level === "error" || level === "warning") {
      console.log("⚠️ Level triggers alert check, calling checkSuspiciousActivity...");
      const alert = await checkSuspiciousActivity(log);
      console.log("📢 Alert result:", alert ? "Created with ID: " + alert._id : "Not created");
    }

    return log;
  } catch (error) {
    console.error("❌ Log creation error:", error);
  }
};

/**
 * @route   POST /api/vulnerabilities/scan
 * @desc    Perform vulnerability scan on a website
 * @access  Private
 */
router.post("/scan", protect, async (req, res) => {
  const { siteUrl } = req.body;
  
  if (!siteUrl) {
    return res.status(400).json({ message: "Site URL is required" });
  }

  const scanId = uuidv4();
  const startTime = Date.now();

  try {
    // Log scan start
    await createLog(
      "info",
      `Vulnerability scan started for ${siteUrl}`,
      ["vulnerability", "scan", "started"],
      { scanId, siteUrl, startTime: new Date() },
      req.user._id
    );

    const scanHistory = await ScanHistory.create({
      scanId,
      siteUrl,
      userId: req.user._id,
      status: "In Progress",
      startedAt: new Date()
    });

    console.log(`🔍 Starting scan ${scanId} for ${siteUrl}`);

    const vulnerabilities = await runVulnerabilityScan(siteUrl);

    const criticalCount = vulnerabilities.filter(v => v.severity === "Critical").length;
    const highCount = vulnerabilities.filter(v => v.severity === "High").length;
    const mediumCount = vulnerabilities.filter(v => v.severity === "Medium").length;
    const lowCount = vulnerabilities.filter(v => v.severity === "Low").length;

    const savedVulns = await Vulnerability.insertMany(
      vulnerabilities.map(v => ({ ...v, siteUrl, scanId }))
    );

    const duration = Math.round((Date.now() - startTime) / 1000);
    await ScanHistory.findOneAndUpdate(
      { scanId },
      {
        status: "Completed",
        totalVulnerabilities: vulnerabilities.length,
        criticalCount,
        highCount,
        mediumCount,
        lowCount,
        duration,
        completedAt: new Date()
      }
    );

    // Log scan completion with results
    await createLog(
      vulnerabilities.length > 0 ? "warning" : "info",
      `Vulnerability scan completed for ${siteUrl} - Found ${vulnerabilities.length} vulnerabilities (Critical: ${criticalCount}, High: ${highCount}, Medium: ${mediumCount}, Low: ${lowCount})`,
      ["vulnerability", "scan", "completed"],
      {
        scanId,
        siteUrl,
        totalVulnerabilities: vulnerabilities.length,
        critical: criticalCount,
        high: highCount,
        medium: mediumCount,
        low: lowCount,
        duration
      },
      req.user._id
    );

    // Log critical vulnerabilities
    if (criticalCount > 0) {
      await createLog(
        "suspicious",
        `CRITICAL: ${criticalCount} critical vulnerabilities detected in ${siteUrl}`,
        ["vulnerability", "critical", "alert", "exploit"],
        { scanId, siteUrl, criticalCount },
        req.user._id
      );
    }

    // Log high severity vulnerabilities
    if (highCount > 0) {
      await createLog(
        "warning",
        `${highCount} high severity vulnerabilities detected in ${siteUrl}`,
        ["vulnerability", "high"],
        { scanId, siteUrl, highCount },
        req.user._id
      );
    }

    await sendVulnerabilityAlert(req.user.email, siteUrl, vulnerabilities, scanId);

    console.log(`✅ Scan ${scanId} completed. Found ${vulnerabilities.length} vulnerabilities`);

    res.status(200).json({
      success: true,
      message: "Scan completed successfully",
      scanId,
      siteUrl,
      total: vulnerabilities.length,
      severity: {
        critical: criticalCount,
        high: highCount,
        medium: mediumCount,
        low: lowCount
      },
      duration,
      results: savedVulns
    });

  } catch (error) {
    console.error("❌ Scan Error:", error);
    
    // Log scan failure
    await createLog(
      "error",
      `Vulnerability scan failed for ${siteUrl} - ${error.message}`,
      ["vulnerability", "scan", "failed"],
      { scanId, siteUrl, error: error.message },
      req.user._id
    );

    await ScanHistory.findOneAndUpdate(
      { scanId },
      {
        status: "Failed",
        errorMessage: error.message,
        completedAt: new Date()
      }
    );

    res.status(500).json({ 
      success: false,
      message: "Failed to perform vulnerability scan", 
      error: error.message 
    });
  }
});

/**
 * @route   GET /api/vulnerabilities
 * @desc    Get all vulnerabilities with filtering and pagination
 * @access  Private
 */
router.get("/", protect, async (req, res) => {
  try {
    const { 
      severity, 
      status, 
      siteUrl, 
      scanId,
      page = 1, 
      limit = 50 
    } = req.query;

    const filter = {};
    if (severity) filter.severity = severity;
    if (status) filter.status = status;
    if (siteUrl) filter.siteUrl = new RegExp(siteUrl, "i");
    if (scanId) filter.scanId = scanId;

    const skip = (parseInt(page) - 1) * parseInt(limit);
    const vulnerabilities = await Vulnerability.find(filter)
      .sort({ detectedAt: -1 })
      .skip(skip)
      .limit(parseInt(limit));

    const total = await Vulnerability.countDocuments(filter);

    res.json({
      vulnerabilities,
      pagination: {
        total,
        page: parseInt(page),
        pages: Math.ceil(total / parseInt(limit)),
        limit: parseInt(limit)
      }
    });
  } catch (err) {
    console.error("❌ Fetch Error:", err);
    res.status(500).json({ 
      message: "Error fetching vulnerabilities", 
      error: err.message 
    });
  }
});

/**
 * @route   GET /api/vulnerabilities/stats
 * @desc    Get vulnerability statistics
 * @access  Private
 */
router.get("/stats", protect, async (req, res) => {
  try {
    const [total, critical, high, medium, low, open, resolved] = await Promise.all([
      Vulnerability.countDocuments(),
      Vulnerability.countDocuments({ severity: "Critical" }),
      Vulnerability.countDocuments({ severity: "High" }),
      Vulnerability.countDocuments({ severity: "Medium" }),
      Vulnerability.countDocuments({ severity: "Low" }),
      Vulnerability.countDocuments({ status: "Open" }),
      Vulnerability.countDocuments({ status: "Resolved" })
    ]);

    let recentScans = [];
    try {
      recentScans = await ScanHistory.find({ userId: req.user._id })
        .sort({ startedAt: -1 })
        .limit(5);
    } catch (scanErr) {
      console.log("ScanHistory not available yet:", scanErr.message);
    }

    res.json({
      total,
      severity: { critical, high, medium, low },
      status: { open, resolved },
      recentScans
    });
  } catch (err) {
    console.error("❌ Stats Error:", err);
    res.status(500).json({ 
      message: "Error fetching statistics",
      error: err.message 
    });
  }
});

/**
 * @route   GET /api/vulnerabilities/scans
 * @desc    Get scan history
 * @access  Private
 */
router.get("/scans", protect, async (req, res) => {
  try {
    const scans = await ScanHistory.find({ userId: req.user._id })
      .sort({ startedAt: -1 })
      .limit(50);
    
    res.json(scans);
  } catch (err) {
    console.error("❌ Scan History Error:", err);
    res.status(500).json({ message: "Error fetching scan history" });
  }
});

/**
 * @route   GET /api/vulnerabilities/scan/:scanId
 * @desc    Get specific scan details with vulnerabilities
 * @access  Private
 */
router.get("/scan/:scanId", protect, async (req, res) => {
  try {
    const { scanId } = req.params;

    const [scanHistory, vulnerabilities] = await Promise.all([
      ScanHistory.findOne({ scanId, userId: req.user._id }),
      Vulnerability.find({ scanId })
    ]);

    if (!scanHistory) {
      return res.status(404).json({ message: "Scan not found" });
    }

    res.json({
      scan: scanHistory,
      vulnerabilities
    });
  } catch (err) {
    console.error("❌ Scan Details Error:", err);
    res.status(500).json({ message: "Error fetching scan details" });
  }
});

/**
 * @route   PATCH /api/vulnerabilities/:id/status
 * @desc    Update vulnerability status
 * @access  Private
 */
router.patch("/:id/status", protect, async (req, res) => {
  try {
    const { status } = req.body;
    
    if (!["Open", "In Progress", "Resolved", "Ignored"].includes(status)) {
      return res.status(400).json({ message: "Invalid status" });
    }

    const update = { status };
    if (status === "Resolved") {
      update.resolvedAt = new Date();
      update.resolvedBy = req.user._id;
    }

    const vulnerability = await Vulnerability.findByIdAndUpdate(
      req.params.id,
      update,
      { new: true }
    );

    if (!vulnerability) {
      return res.status(404).json({ message: "Vulnerability not found" });
    }

    // Log vulnerability status change
    await createLog(
      "info",
      `Vulnerability status updated to ${status}: ${vulnerability.type}`,
      ["vulnerability", "status", status.toLowerCase()],
      { vulnerabilityId: vulnerability._id, type: vulnerability.type, newStatus: status },
      req.user._id
    );

    res.json(vulnerability);
  } catch (err) {
    console.error("❌ Update Status Error:", err);
    res.status(500).json({ message: "Error updating vulnerability status" });
  }
});

/**
 * @route   GET /api/vulnerabilities/export
 * @desc    Generate and download PDF report
 * @access  Private
 */
router.get("/export", protect, async (req, res) => {
  try {
    const { scanId, siteUrl } = req.query;

    let filter = {};
    if (scanId) {
      filter.scanId = scanId;
    } else if (siteUrl) {
      filter.siteUrl = siteUrl;
    }

    const vulnerabilities = await Vulnerability.find(filter).sort({ severity: 1, detectedAt: -1 });

    if (!vulnerabilities.length) {
      return res.status(404).json({ message: "No vulnerabilities found to export" });
    }

    let scanInfo = null;
    if (scanId) {
      try {
        scanInfo = await ScanHistory.findOne({ scanId });
      } catch (err) {
        console.log("ScanHistory not found, using default data");
      }
    }

    const reportData = {
      siteUrl: siteUrl || vulnerabilities[0].siteUrl,
      startedAt: scanInfo?.startedAt || vulnerabilities[0].detectedAt,
      duration: scanInfo?.duration,
      status: scanInfo?.status || "Completed",
      totalVulnerabilities: vulnerabilities.length,
      criticalCount: vulnerabilities.filter(v => v.severity === "Critical").length,
      highCount: vulnerabilities.filter(v => v.severity === "High").length,
      mediumCount: vulnerabilities.filter(v => v.severity === "Medium").length,
      lowCount: vulnerabilities.filter(v => v.severity === "Low").length,
      vulnerabilities
    };

    const reportsDir = "./reports";
    if (!fs.existsSync(reportsDir)) {
      fs.mkdirSync(reportsDir, { recursive: true });
    }

    const fileName = `vulnerability_report_${Date.now()}.pdf`;
    const filePath = `${reportsDir}/${fileName}`;
    
    await generateVulnerabilityReport(reportData, filePath);

    // Log report generation
    await createLog(
      "info",
      `Vulnerability report generated for ${siteUrl || scanId}`,
      ["vulnerability", "report", "export"],
      { scanId, siteUrl, fileName },
      req.user._id
    );

    await sendReportEmail(req.user.email, reportData, filePath).catch(err => {
      console.error("Email send error (non-blocking):", err.message);
    });

    res.download(filePath, fileName, (err) => {
      if (err) {
        console.error("Download error:", err);
      }
      setTimeout(() => {
        try {
          if (fs.existsSync(filePath)) {
            fs.unlinkSync(filePath);
          }
        } catch (cleanupErr) {
          console.error("File cleanup error:", cleanupErr);
        }
      }, 5000);
    });

  } catch (err) {
    console.error("❌ Export Error:", err);
    res.status(500).json({ 
      message: "Error generating PDF report", 
      error: err.message
    });
  }
});

/**
 * @route   DELETE /api/vulnerabilities/bulk
 * @desc    Delete multiple vulnerabilities
 * @access  Private
 * @important MUST be before /:id route to avoid route conflict
 */
router.delete("/bulk", protect, async (req, res) => {
  try {
    const { ids } = req.body;
    
    console.log("📦 Bulk delete request received:", { idsCount: ids?.length });
    
    if (!ids || !Array.isArray(ids) || ids.length === 0) {
      return res.status(400).json({ 
        success: false,
        message: "No vulnerability IDs provided" 
      });
    }

    // Validate that all IDs are valid MongoDB ObjectIds
    const mongoose = await import('mongoose');
    const validIds = ids.filter(id => mongoose.Types.ObjectId.isValid(id));
    
    if (validIds.length === 0) {
      return res.status(400).json({ 
        success: false,
        message: "No valid vulnerability IDs provided" 
      });
    }

    // Get vulnerability info before deletion for logging
    const vulnerabilities = await Vulnerability.find({
      _id: { $in: validIds }
    }).select('type severity siteUrl scanId');

    const result = await Vulnerability.deleteMany({
      _id: { $in: validIds }
    });

    // Log bulk deletion
    await createLog(
      "info",
      `Bulk deletion: ${result.deletedCount} vulnerabilities deleted`,
      ["vulnerability", "bulk-delete"],
      { 
        count: result.deletedCount, 
        requestedIds: ids.length,
        validIds: validIds.length,
        deletedVulnerabilities: vulnerabilities.map(v => ({
          type: v.type,
          severity: v.severity,
          siteUrl: v.siteUrl
        }))
      },
      req.user._id
    );

    console.log(`✅ Bulk delete: ${result.deletedCount} vulnerabilities deleted by user ${req.user._id}`);

    res.json({ 
      success: true,
      message: `${result.deletedCount} vulnerabilities deleted successfully`,
      deletedCount: result.deletedCount,
      requestedCount: ids.length
    });
  } catch (err) {
    console.error("❌ Bulk Delete Error:", err);
    res.status(500).json({ 
      success: false,
      message: "Error deleting vulnerabilities",
      error: err.message 
    });
  }
});

/**
 * @route   DELETE /api/vulnerabilities/:id
 * @desc    Delete a specific vulnerability
 * @access  Private
 */
router.delete("/:id", protect, async (req, res) => {
  try {
    console.log("🗑️ Single delete request for ID:", req.params.id);
    
    const vulnerability = await Vulnerability.findById(req.params.id);
    
    if (!vulnerability) {
      return res.status(404).json({ 
        success: false,
        message: "Vulnerability not found" 
      });
    }

    // Store vulnerability info before deletion for logging
    const vulnInfo = {
      id: vulnerability._id,
      type: vulnerability.type,
      severity: vulnerability.severity,
      siteUrl: vulnerability.siteUrl,
      scanId: vulnerability.scanId
    };

    await vulnerability.deleteOne();

    // Log vulnerability deletion
    await createLog(
      "info",
      `Vulnerability deleted: ${vulnInfo.type} (${vulnInfo.severity}) from ${vulnInfo.siteUrl}`,
      ["vulnerability", "deleted"],
      { 
        vulnerabilityId: vulnInfo.id, 
        type: vulnInfo.type,
        severity: vulnInfo.severity,
        siteUrl: vulnInfo.siteUrl,
        scanId: vulnInfo.scanId
      },
      req.user._id
    );

    console.log(`✅ Vulnerability ${vulnInfo.id} deleted by user ${req.user._id}`);

    res.json({ 
      success: true,
      message: "Vulnerability deleted successfully" 
    });
  } catch (err) {
    console.error("❌ Delete Error:", err);
    res.status(500).json({ 
      success: false,
      message: "Error deleting vulnerability",
      error: err.message 
    });
  }
});

// ========== HELPER FUNCTIONS ==========

/**
 * Helper function for sending report email
 */
const sendReportEmail = async (userEmail, reportData, filePath) => {
  try {
    await transporter.sendMail({
      to: userEmail,
      subject: "Vulnerability Scan Report (PDF)",
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <h2>Vulnerability Scan Report</h2>
          <p>Your vulnerability scan report is attached.</p>
          <ul>
            <li>Site: ${reportData.siteUrl}</li>
            <li>Total Issues: ${reportData.totalVulnerabilities}</li>
            <li>Critical: ${reportData.criticalCount}</li>
            <li>High: ${reportData.highCount}</li>
          </ul>
        </div>
      `,
      attachments: [{ filename: "vulnerability_report.pdf", path: filePath }]
    });
    console.log("✅ Report email sent to:", userEmail);
  } catch (err) {
    console.error("❌ Report email error:", err.message);
    throw err;
  }
};

/**
 * Helper function for sending vulnerability alert emails
 */
const sendVulnerabilityAlert = async (userEmail, siteUrl, vulnerabilities, scanId) => {
  try {
    if (!vulnerabilities || vulnerabilities.length === 0) {
      return;
    }

    const critical = vulnerabilities.filter(v => v.severity === "Critical").length;
    const high = vulnerabilities.filter(v => v.severity === "High").length;
    const medium = vulnerabilities.filter(v => v.severity === "Medium").length;
    const low = vulnerabilities.filter(v => v.severity === "Low").length;

    const vulnList = vulnerabilities.slice(0, 10).map((v, i) => `
      <tr style="border-bottom: 1px solid #e5e7eb;">
        <td style="padding: 12px; font-size: 14px;">${i + 1}</td>
        <td style="padding: 12px; font-size: 14px;">${v.type}</td>
        <td style="padding: 12px;">
          <span style="padding: 4px 12px; border-radius: 12px; font-size: 12px; font-weight: 600; 
            ${v.severity === 'Critical' ? 'background: #fef2f2; color: #dc2626;' : 
              v.severity === 'High' ? 'background: #fff7ed; color: #ea580c;' :
              v.severity === 'Medium' ? 'background: #fef3c7; color: #f59e0b;' :
              'background: #f0fdf4; color: #10b981;'}">
            ${v.severity}
          </span>
        </td>
        <td style="padding: 12px; font-size: 14px; color: #6b7280;">${v.description.substring(0, 50)}...</td>
      </tr>
    `).join('');

    const mailOptions = {
      from: process.env.EMAIL_USER,
      to: userEmail,
      subject: `Vulnerability Scan Results - ${vulnerabilities.length} Issues Found`,
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 700px; margin: 0 auto; background-color: #f9fafb; padding: 20px; border-radius: 10px;">
          <div style="background: linear-gradient(135deg, #dc2626 0%, #ea580c 100%); color: white; padding: 30px; border-radius: 10px 10px 0 0; text-align: center;">
            <h1 style="margin: 0; font-size: 28px;">Security Scan Complete</h1>
            <p style="margin: 10px 0 0 0; opacity: 0.9;">Vulnerability Assessment Report</p>
          </div>
          
          <div style="background: white; padding: 30px; border-radius: 0 0 10px 10px;">
            <h2 style="color: #1f2937; margin-top: 0;">Scan Summary</h2>
            <div style="background: #f3f4f6; padding: 20px; border-radius: 8px; margin-bottom: 20px;">
              <p style="margin: 5px 0; color: #374151;"><strong>Site URL:</strong> ${siteUrl}</p>
              <p style="margin: 5px 0; color: #374151;"><strong>Scan ID:</strong> ${scanId}</p>
              <p style="margin: 5px 0; color: #374151;"><strong>Total Issues:</strong> ${vulnerabilities.length}</p>
            </div>

            <h3 style="color: #1f2937;">Severity Breakdown</h3>
            <div style="display: grid; grid-template-columns: repeat(2, 1fr); gap: 15px; margin-bottom: 25px;">
              <div style="background: #fef2f2; padding: 15px; border-radius: 8px; border-left: 4px solid #dc2626;">
                <p style="margin: 0; font-size: 14px; color: #991b1b;">Critical</p>
                <p style="margin: 5px 0 0 0; font-size: 24px; font-weight: bold; color: #dc2626;">${critical}</p>
              </div>
              <div style="background: #fff7ed; padding: 15px; border-radius: 8px; border-left: 4px solid #ea580c;">
                <p style="margin: 0; font-size: 14px; color: #9a3412;">High</p>
                <p style="margin: 5px 0 0 0; font-size: 24px; font-weight: bold; color: #ea580c;">${high}</p>
              </div>
              <div style="background: #fef3c7; padding: 15px; border-radius: 8px; border-left: 4px solid #f59e0b;">
                <p style="margin: 0; font-size: 14px; color: #92400e;">Medium</p>
                <p style="margin: 5px 0 0 0; font-size: 24px; font-weight: bold; color: #f59e0b;">${medium}</p>
              </div>
              <div style="background: #f0fdf4; padding: 15px; border-radius: 8px; border-left: 4px solid #10b981;">
                <p style="margin: 0; font-size: 14px; color: #065f46;">Low</p>
                <p style="margin: 5px 0 0 0; font-size: 24px; font-weight: bold; color: #10b981;">${low}</p>
              </div>
            </div>

            <h3 style="color: #1f2937;">Top Vulnerabilities</h3>
            <table style="width: 100%; border-collapse: collapse; margin-bottom: 20px;">
              <thead>
                <tr style="background: #f9fafb; border-bottom: 2px solid #e5e7eb;">
                  <th style="padding: 12px; text-align: left; font-size: 12px; color: #6b7280; text-transform: uppercase;">#</th>
                  <th style="padding: 12px; text-align: left; font-size: 12px; color: #6b7280; text-transform: uppercase;">Type</th>
                  <th style="padding: 12px; text-align: left; font-size: 12px; color: #6b7280; text-transform: uppercase;">Severity</th>
                  <th style="padding: 12px; text-align: left; font-size: 12px; color: #6b7280; text-transform: uppercase;">Description</th>
                </tr>
              </thead>
              <tbody>
                ${vulnList}
              </tbody>
            </table>

            ${vulnerabilities.length > 10 ? `<p style="text-align: center; color: #6b7280; font-size: 14px;">... and ${vulnerabilities.length - 10} more</p>` : ''}

            <hr style="border: none; border-top: 1px solid #e5e7eb; margin: 25px 0;">
            
            <p style="color: #9ca3af; font-size: 12px; text-align: center; margin: 0;">
              This is an automated message from SEO Intrusion Detection System
            </p>
          </div>
        </div>
      `
    };

    await transporter.sendMail(mailOptions);
    console.log(`✅ Vulnerability alert email sent to ${userEmail}`);
  } catch (err) {
    console.error("❌ Email alert error:", err);
  }
};

export default router;