import PDFDocument from "pdfkit";
import fs from "fs";

/**
 * Generates a professional PDF vulnerability report
 * @param {Object} scanData - Complete scan information
 * @param {String} filePath - Where to save the PDF
 */
export const generateVulnerabilityReport = (scanData, filePath = "vulnerability_report.pdf") => {
  return new Promise((resolve, reject) => {
    try {
      const doc = new PDFDocument({ margin: 50, size: "A4" });
      const stream = fs.createWriteStream(filePath);
      doc.pipe(stream);

      // ========== HEADER ==========
      doc.fontSize(28).fillColor("#DC2626").text("Vulnerability Scan Report", { align: "center" });
      doc.moveDown(0.5);
      doc.fontSize(12).fillColor("#6B7280").text("SEO Intrusion Detection System", { align: "center" });
      doc.moveDown(2);

      // ========== SCAN SUMMARY ==========
      doc.fontSize(18).fillColor("#1F2937").text("Scan Summary");
      doc.moveDown(0.5);
      
      const summary = [
        `Site URL: ${scanData.siteUrl}`,
        `Scan Date: ${new Date(scanData.startedAt).toLocaleString()}`,
        `Scan Duration: ${scanData.duration ? `${scanData.duration}s` : "N/A"}`,
        `Total Vulnerabilities: ${scanData.totalVulnerabilities}`,
        `Status: ${scanData.status}`
      ];

      doc.fontSize(11).fillColor("#374151");
      summary.forEach(line => {
        doc.text(line);
        doc.moveDown(0.3);
      });

      // ========== SEVERITY BREAKDOWN ==========
      doc.moveDown(1);
      doc.fontSize(16).fillColor("#1F2937").text("Severity Breakdown");
      doc.moveDown(0.5);

      const severities = [
        { label: "Critical", count: scanData.criticalCount || 0, color: "#DC2626" },
        { label: "High", count: scanData.highCount || 0, color: "#EA580C" },
        { label: "Medium", count: scanData.mediumCount || 0, color: "#F59E0B" },
        { label: "Low", count: scanData.lowCount || 0, color: "#10B981" }
      ];

      severities.forEach(sev => {
        doc.fontSize(11).fillColor(sev.color).text(`● ${sev.label}: ${sev.count}`, { continued: false });
        doc.moveDown(0.3);
      });

      // Add page break if needed
      if (doc.y > 650) {
        doc.addPage();
      } else {
        doc.moveDown(2);
      }

      // ========== DETAILED FINDINGS ==========
      doc.fontSize(18).fillColor("#1F2937").text("Detailed Findings");
      doc.moveDown(1);

      if (!scanData.vulnerabilities || scanData.vulnerabilities.length === 0) {
        doc.fontSize(11).fillColor("#6B7280").text("No vulnerabilities detected. Your site appears secure!");
      } else {
        scanData.vulnerabilities.forEach((vuln, index) => {
          // Check if we need a new page
          if (doc.y > 700) {
            doc.addPage();
          }

          // Vulnerability number and type
          doc.fontSize(14).fillColor("#1F2937").text(`${index + 1}. ${vuln.type}`, { underline: true });
          doc.moveDown(0.3);

          // Severity badge
          const severityColor = 
            vuln.severity === "Critical" ? "#DC2626" :
            vuln.severity === "High" ? "#EA580C" :
            vuln.severity === "Medium" ? "#F59E0B" : "#10B981";

          doc.fontSize(10).fillColor(severityColor).text(`Severity: ${vuln.severity}`, { bold: true });
          doc.moveDown(0.3);

          // Description
          doc.fontSize(10).fillColor("#374151").text(`Description: ${vuln.description}`);
          doc.moveDown(0.3);

          // Affected Component
          if (vuln.affectedComponent) {
            doc.fontSize(10).fillColor("#6B7280").text(`Affected: ${vuln.affectedComponent}`);
            doc.moveDown(0.3);
          }

          // Version Info
          if (vuln.detectedVersion) {
            doc.fontSize(10).fillColor("#6B7280").text(
              `Version: ${vuln.detectedVersion}${vuln.fixedVersion ? ` → Update to ${vuln.fixedVersion}` : ""}`
            );
            doc.moveDown(0.3);
          }

          // CVE ID
          if (vuln.cveId) {
            doc.fontSize(9).fillColor("#DC2626").text(`CVE: ${vuln.cveId}`);
            doc.moveDown(0.3);
          }

          // Recommendation
          if (vuln.recommendation) {
            doc.fontSize(10).fillColor("#059669").text(`✓ Recommendation: ${vuln.recommendation}`);
            doc.moveDown(0.3);
          }

          // Exploit Available Warning
          if (vuln.exploitAvailable) {
            doc.fontSize(9).fillColor("#DC2626").text("⚠️  PUBLIC EXPLOIT AVAILABLE - PATCH IMMEDIATELY");
            doc.moveDown(0.3);
          }

          doc.moveDown(1);
        });
      }

      // ========== FOOTER ==========
      doc.moveDown(2);
      doc.fontSize(10).fillColor("#9CA3AF").text(
        `Generated by SEO Intrusion Detection System on ${new Date().toLocaleString()}`,
        { align: "center" }
      );

      doc.end();

      stream.on("finish", () => {
        console.log("✅ PDF report generated successfully");
        resolve(filePath);
      });

      stream.on("error", (err) => {
        console.error("❌ PDF generation error:", err);
        reject(err);
      });

    } catch (err) {
      console.error("❌ PDF creation error:", err);
      reject(err);
    }
  });
};